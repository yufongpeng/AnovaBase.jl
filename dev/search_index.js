var documenterSearchIndex = {"docs":
[{"location":"AnovaFixedEffectModels/#AnovaFixedEffectModels.jl","page":"AnovaFixedEffectModels.jl","title":"AnovaFixedEffectModels.jl","text":"","category":"section"},{"location":"AnovaFixedEffectModels/","page":"AnovaFixedEffectModels.jl","title":"AnovaFixedEffectModels.jl","text":"CurrentModule = AnovaFixedEffectModels","category":"page"},{"location":"AnovaFixedEffectModels/#ANOVA","page":"AnovaFixedEffectModels.jl","title":"ANOVA","text":"","category":"section"},{"location":"AnovaFixedEffectModels/","page":"AnovaFixedEffectModels.jl","title":"AnovaFixedEffectModels.jl","text":"AnovaFixedEffectModels.anova(::Val{:AnovaFixedEffectModels})\nanova_lfe","category":"page"},{"location":"AnovaFixedEffectModels/#AnovaBase.anova-Tuple{Val{:AnovaFixedEffectModels}}","page":"AnovaFixedEffectModels.jl","title":"AnovaBase.anova","text":"anova(<models>...; test::Type{<: GoodnessOfFit})\nanova(test::Type{<: GoodnessOfFit}, <models>...;  <keyword arguments>)\n\nAnalysis of variance.\n\nReturn AnovaResult{M, test, N}.\n\nmodels: model objects\nTableRegressionModel{<: FixedEffectModel} fitted by AnovaFixedEffectModels.lfe.\nIf mutiple models are provided, they should be nested and the last one is the most saturated.\ntest: test statistics for goodness of fit. The default is based on the model type.\nTableRegressionModel{<: FixedEffectModel}: FTest.\n\nOther keyword arguments:\n\nWhen one model is provided:  \ntype specifies type of anova (1 or 3). Default value is 1.\nWhen multiple models are provided:  \ncheck: allows to check if models are nested. Defalut value is true. Some checkers are not implemented now.\nisnested: true when models are checked as nested (manually or automatically). Defalut value is false. \n\nAlgorithm:\n\nFor the ith model, devᵢ is defined as the sum of squared deviance residuals (unit deviance).  It is equivalent to the residual sum.\n\nThe attribute deviance is Δdevᵢ = devᵢ₋₁ - devᵢ.\n\nF-statistic is then defined as Δdevᵢ/(squared dispersion × degree of freedom).\n\nFor type I and III ANOVA, F-statistic is computed directly by the variance-covariance matrix(vcov) of the saturated model; the deviance is calculated backward.\n\nType I:\nFirst, calculate f as the upper factor of Cholesky factorization of vcov⁻¹ * β.\nFor a factor that starts at ith row/column of vcov with n degree of freedom, the f-statistic is Σᵢⁱ⁺ⁿ⁻¹ fₖ²/n.\nType III: \nFor a factor occupying ith to jth row/column of vcov with n degree of freedom, f-statistic is (β[i:j]' * vcov[i:j, i:j]⁻¹ * β[i:j])/n.\n\nFor fitting new models and conducting anova at the same time, see anova_lfe for FixedEffectModel.\n\n\n\n\n\n","category":"method"},{"location":"AnovaFixedEffectModels/#AnovaFixedEffectModels.anova_lfe","page":"AnovaFixedEffectModels.jl","title":"AnovaFixedEffectModels.anova_lfe","text":"anova_lfe(f::FormulaTerm, df, vcov::CovarianceEstimator = Vcov.simple(); \n        test::Type{<: GoodnessOfFit} = FTest, <keyword arguments>)\nanova_lfe(test::Type{<: GoodnessOfFit}, f::FormulaTerm, df, vcov::CovarianceEstimator = Vcov.simple(); <keyword arguments>)\n\nANOVA for fixed-effect linear regression.\n\nvcov: estimator of covariance matrix.\ntype: type of anova (1 or 3). Default value is 1.\n\nanova_lfe generate a TableRegressionModel{<: FixedEffectModel}.\n\n\n\n\n\n","category":"function"},{"location":"AnovaFixedEffectModels/#Models","page":"AnovaFixedEffectModels.jl","title":"Models","text":"","category":"section"},{"location":"AnovaFixedEffectModels/","page":"AnovaFixedEffectModels.jl","title":"AnovaFixedEffectModels.jl","text":"lfe\nto_trm","category":"page"},{"location":"AnovaFixedEffectModels/#AnovaFixedEffectModels.lfe","page":"AnovaFixedEffectModels.jl","title":"AnovaFixedEffectModels.lfe","text":"lfe(formula::FormulaTerm, df, vcov::CovarianceEstimator = Vcov.simple(); kwargs...)\n\nFit a FixedEffectModel and wrap it into TableRegressionModel. \n\nwarn: Warn\nThis function currently does not perform well. It re-compiles everytime; may be due to @nonspecialize for parameters of reg.\n\n\n\n\n\n","category":"function"},{"location":"AnovaFixedEffectModels/#AnovaFixedEffectModels.to_trm","page":"AnovaFixedEffectModels.jl","title":"AnovaFixedEffectModels.to_trm","text":"to_trm(model, df)\n\nWrap fitted FixedEffectModel into TableRegressionModel.\n\n\n\n\n\n","category":"function"},{"location":"Algorithm_AnovaFixedEffectModels/#AnovaFixedEffectModels","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"","category":"section"},{"location":"Algorithm_AnovaFixedEffectModels/#F-test","page":"AnovaFixedEffectModels","title":"F-test","text":"","category":"section"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"Let a vector of models mathbfM and the corresponding base models mathbfB:","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"beginaligned\n    mathbfM = (M_1  M_n)\n    mathbfB = (B_1  B_n)\nendaligned","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"When m models, (M_1  M_m), are given, mathbfM = (M_2  M_m), mathbfB = (M_1  M_m-1). ","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"When one model is given, n is the number of factors except for the factors used in the simplest model. The mathbf M and mathbf B depends on the type of ANOVA.","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"Let the number of columns of M_n's model matrix, m and the number of factors of M_n, l. ","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"A map id_X 1 m mapsto 1 l maps the index of columns into the corresponding factor sequentially, i.e. forall i j in 1 m i lt j implies id_X(i) leq id_X(j) and forall i in 1 m id_X(i) = k implies textcolumn_i text is a component of  ktextth factor.","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"The included factors of M_j and B_j are:","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"beginaligned\n    mathcalM_j = f in 1 l  f text is a factor of  M_j\n    mathcalB_j = f in 1 l  f text is a factor of  B_j\nendaligned","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"We can define a vector of index sets for each model:","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"mathbfI = (I_1  I_n)","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"where forall i in I_k id_X(i) in mathcalM_ksetminus mathcalB_k.","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"The deviances for models and base models are:","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"beginaligned\n    mathcalD = (mathcalD_1  mathcalD_n)\n    mathcalR = (mathcalR_1  mathcalR_n)\nendaligned","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"which is equivalent to the residual sum of squares.","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"The difference of mathcalD and mathcalR is:","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"boldsymbolDelta mathcalD = mathcalD - mathcalR","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"The degrees of freedom (dof) is:","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"mathbfdf = (n(I_1)  n(I_n))","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"where n(I) is the size of I.","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"F-value is a vector:","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"mathbfF sim mathcalF_mathbfdf df_r","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"where ","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"F_i = fracDelta mathcalD_i times df_rrss^2 times df_i","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"and rss is the residual sum of squares of B_n; df_r is the degrees of freedom of the residuals.","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"For a single model, F-value is computed directly by the variance-covariance matrix (boldsymbol Sigma) and the coefficients (boldsymbol beta) of the model; the deviance is calculated backward. Each M_j corresponds to a factor f_j, i.e. id_XI_j = f_j.","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/#Type-I","page":"AnovaFixedEffectModels","title":"Type I","text":"","category":"section"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"Factors are sequentially added to the models, i.e. forall i j in 1 n i  j implies (mathcalB_i subset mathcalB_j) cap (mathcalM_i subset mathcalM_j).","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"Calculate the the upper factor of Cholesky factorization of boldsymbol Sigma^-1 and multiply with boldsymbol beta: ","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"beginaligned\n    boldsymbolSigma^-1 = mathbfLU\n    boldsymboleta = mathbfUboldsymbolbeta\n    F_j = fracsum_k in I_jeta_k^2df_j\nendaligned","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/#Type-III:","page":"AnovaFixedEffectModels","title":"Type III:","text":"","category":"section"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"The models are all M_n, the base models are models without each factors.  ","category":"page"},{"location":"Algorithm_AnovaFixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"F_j = fracboldsymbolbeta_I_j^T boldsymbolSigma_I_j I_j^-1 boldsymbolbeta_I_jdf_j","category":"page"},{"location":"AnovaBase/#AnovaBase.jl","page":"AnovaBase.jl","title":"AnovaBase.jl","text":"","category":"section"},{"location":"AnovaBase/","page":"AnovaBase.jl","title":"AnovaBase.jl","text":"CurrentModule = AnovaBase","category":"page"},{"location":"AnovaBase/#Models","page":"AnovaBase.jl","title":"Models","text":"","category":"section"},{"location":"AnovaBase/","page":"AnovaBase.jl","title":"AnovaBase.jl","text":"AnovaBase.AnovaModel\nAnovaBase.FullModel\nAnovaBase.NestedModels\nAnovaBase.nestedmodels(::RegressionModel)","category":"page"},{"location":"AnovaBase/#AnovaBase.AnovaModel","page":"AnovaBase.jl","title":"AnovaBase.AnovaModel","text":"abstract type AnovaModel{M, N} end\n\nAn abstract type as super type of any models for ANOVA.\n\n\n\n\n\n","category":"type"},{"location":"AnovaBase/#AnovaBase.FullModel","page":"AnovaBase.jl","title":"AnovaBase.FullModel","text":"FullModel{M, N} <: AnovaModel{M, N}\n\nA wrapper of full model for conducting ANOVA.\n\nM is a type of regression model.\nN is the number of models.\n\nFields\n\nmodel: a regression model.\npred_id: the index of terms included in ANOVA. The source iterable can be obtained by predictors(model). This value may depend on type for certain model, e.g. type 1 ANOVA for a gamma regression model with inverse link.\ntype: type of ANOVA, either 1, 2 or 3.\n\n\n\n\n\n","category":"type"},{"location":"AnovaBase/#AnovaBase.NestedModels","page":"AnovaBase.jl","title":"AnovaBase.NestedModels","text":"NestedModels{M, N} <: AnovaModel{M, N}\n\nA wrapper of nested models for conducting ANOVA.\n\nM is a type of regression model.\nN is the number of models.\n\nFields\n\nmodels: a tuple of models.\n\n\n\n\n\n","category":"type"},{"location":"AnovaBase/#AnovaBase.nestedmodels-Tuple{RegressionModel}","page":"AnovaBase.jl","title":"AnovaBase.nestedmodels","text":"nestedmodels(<model>; <keyword arguments>)\nnestedmodels(<model type>, formula, data; <keyword arguments>)\n\nGenerate nested models NestedModels from a model or modeltype, formula and data.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#ANOVA","page":"AnovaBase.jl","title":"ANOVA","text":"","category":"section"},{"location":"AnovaBase/","page":"AnovaBase.jl","title":"AnovaBase.jl","text":"AnovaBase.AnovaResult\nAnovaBase.anova(::Type{<: GoodnessOfFit}, ::RegressionModel)","category":"page"},{"location":"AnovaBase/#AnovaBase.AnovaResult","page":"AnovaBase.jl","title":"AnovaBase.AnovaResult","text":"AnovaResult{M, T, N}\n\nReturned object of anova.\n\nM is NestedModels or FullModel.\nT is a subtype of GoodnessOfFit; either FTest or LRT.\nN is the length of parameters.\n\nFields\n\nanovamodel: a NestedModels or a FullModel.\ndof: degrees of freedom of models or predictors.\ndeviance: deviance(s) for calculating test statistics. See deviance for more details.\nteststat: value(s) of test statiscics.\npval: p-value(s) of test statiscics.\notherstat: NamedTuple contained extra statistics.\n\n\n\n\n\n","category":"type"},{"location":"AnovaBase/#AnovaBase.anova-Tuple{Type{<:GoodnessOfFit}, RegressionModel}","page":"AnovaBase.jl","title":"AnovaBase.anova","text":"anova(<models>...; test::Type{<: GoodnessOfFit}, <keyword arguments>)\nanova(Test::Type{<: GoodnessOfFit}, <model>; <keyword arguments>)\nanova(Test::Type{<: GoodnessOfFit}, <models>...; <keyword arguments>)\n\nAnalysis of variance.\n\nReturn AnovaResult{M, Test, N}. See AnovaResult for details.\n\nmodels: model objects. If mutiple models are provided, they should be nested, fitted with the same data and the last one is the most complex.\nTest: test statistics for goodness of fit. Available tests are LikelihoodRatioTest (LRT) and FTest.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#Attributes","page":"AnovaBase.jl","title":"Attributes","text":"","category":"section"},{"location":"AnovaBase/","page":"AnovaBase.jl","title":"AnovaBase.jl","text":"AnovaBase.anova_test(aov::AnovaResult)\nAnovaBase.anova_type(aov::AnovaResult)\nAnovaBase.pval(aov::AnovaResult)\nAnovaBase.teststat(aov::AnovaResult)\nAnovaBase.deviance(aov::AnovaResult)\nAnovaBase.dof(::AnovaResult)\nAnovaBase.nobs(aov::AnovaResult)","category":"page"},{"location":"AnovaBase/#AnovaBase.anova_test-Tuple{AnovaResult}","page":"AnovaBase.jl","title":"AnovaBase.anova_test","text":"anova_test(::AnovaResult)\n\nTest statiscics of anova. See AnovaResult for details.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#AnovaBase.anova_type-Tuple{AnovaResult}","page":"AnovaBase.jl","title":"AnovaBase.anova_type","text":"anova_type(aov::AnovaResult)\nanova_type(model::NestedModels)\nanova_type(model::FullModel)\n\nType of anova, either 1, 2 or 3.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#AnovaBase.pval-Tuple{AnovaResult}","page":"AnovaBase.jl","title":"AnovaBase.pval","text":"teststat(aov::AnovaResult)\n\nP-values of test statiscics of anova. See AnovaResult for details.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#AnovaBase.teststat-Tuple{AnovaResult}","page":"AnovaBase.jl","title":"AnovaBase.teststat","text":"teststat(aov::AnovaResult)\n\nValues of test statiscics of anova. See AnovaResult for details.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#StatsAPI.deviance-Tuple{AnovaResult}","page":"AnovaBase.jl","title":"StatsAPI.deviance","text":"deviance(aov::AnovaResult)\n\nReturn the stored devaince. The value repressents different statistics for different models and tests.  It may be deviance, Δdeviance, -2loglikelihood or other measures of model performance.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#StatsAPI.dof-Tuple{AnovaResult}","page":"AnovaBase.jl","title":"StatsAPI.dof","text":"dof(aov::AnovaResult)\n\nDegrees of freedom of each models or predictors.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#StatsAPI.nobs-Tuple{AnovaResult}","page":"AnovaBase.jl","title":"StatsAPI.nobs","text":"nobs(aov::AnovaResult)\nnobs(aov::AnovaResult{<: NestedModels})\n\nNumber of observations.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#Goodness-of-fit","page":"AnovaBase.jl","title":"Goodness of fit","text":"","category":"section"},{"location":"AnovaBase/","page":"AnovaBase.jl","title":"AnovaBase.jl","text":"AnovaBase.GoodnessOfFit\nAnovaBase.FTest\nAnovaBase.LikelihoodRatioTest\nAnovaBase.canonicalgoodnessoffit","category":"page"},{"location":"AnovaBase/#AnovaBase.GoodnessOfFit","page":"AnovaBase.jl","title":"AnovaBase.GoodnessOfFit","text":"abstract type GoodnessOfFit end\n\nAn abstract type as super type of goodness of fit.\n\n\n\n\n\n","category":"type"},{"location":"AnovaBase/#AnovaBase.FTest","page":"AnovaBase.jl","title":"AnovaBase.FTest","text":"struct FTest <: GoodnessOfFit end\n\nType indicates conducting ANOVA by F-test. It can be the first argument or keyword argument test.\n\n\n\n\n\n","category":"type"},{"location":"AnovaBase/#AnovaBase.LikelihoodRatioTest","page":"AnovaBase.jl","title":"AnovaBase.LikelihoodRatioTest","text":"struct LikelihoodRatioTest <: GoodnessOfFit end\nconst LRT = LikelihoodRatioTest\n\nType indicates conducting ANOVA by likelihood-ratio test. It can be the first argument or keyword argument test.\n\n\n\n\n\n","category":"type"},{"location":"AnovaBase/#AnovaBase.canonicalgoodnessoffit","page":"AnovaBase.jl","title":"AnovaBase.canonicalgoodnessoffit","text":"canonicalgoodnessoffit(::FixDispDist) = LRT\ncanonicalgoodnessoffit(::UnivariateDistribution) = FTest\n\nconst FixDispDist = Union{Bernoulli, Binomial, Poisson}\n\nReturn LRT if the distribution has a fixed dispersion; otherwise, FTest.\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#Other-interface","page":"AnovaBase.jl","title":"Other interface","text":"","category":"section"},{"location":"AnovaBase/","page":"AnovaBase.jl","title":"AnovaBase.jl","text":"AnovaBase.dof_residual(aov::AnovaResult)\nAnovaBase.predictors(::RegressionModel)\nAnovaBase.anovatable(::AnovaResult{<: FullModel})","category":"page"},{"location":"AnovaBase/#StatsAPI.dof_residual-Tuple{AnovaResult}","page":"AnovaBase.jl","title":"StatsAPI.dof_residual","text":"dof_residual(aov::AnovaResult)    \ndof_residual(aov::AnovaResult{<: NestedModels})\n\nDegrees of freedom of residuals.\n\nBy default, it applies dof_residual to models in aov.anovamodel.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#AnovaBase.predictors-Tuple{RegressionModel}","page":"AnovaBase.jl","title":"AnovaBase.predictors","text":"predictors(model::RegressionModel)\n\nReturn a tuple of Terms which are predictors of the model. \n\nBy default, it returns formula(model).rhs.terms; if the formula has special structures, this function should be overloaded.\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#AnovaBase.anovatable-Tuple{AnovaResult{<:FullModel}}","page":"AnovaBase.jl","title":"AnovaBase.anovatable","text":"anovatable(aov::AnovaResult{<: FullModel, Test}; rownames = prednames(aov))\nanovatable(aov::AnovaResult{<: NestedModels, Test}; rownames = string.(1:N))\nanovatable(aov::AnovaResult{<: NestedModels, FTest, N}; rownames = string.(1:N)) where N\nanovatable(aov::AnovaResult{<: NestedModels, LRT, N}; rownames = string.(1:N)) where N\n\nReturn a table with coefficients and related statistics of ANOVA. When displaying aov in repl, rownames will be prednames(aov) for FullModel and string.(1:N) for NestedModels. \n\nFor nested models, there are two default methods for FTest and LRT; one can also define new methods dispatching on ::NestedModels{M} where M is a model type. \n\nFor a single model, no default api is implemented.\n\nThe returned AnovaTable object implements the Tables.jl interface, and can be   converted e.g. to a DataFrame via using DataFrames; DataFrame(anovatable(aov)).\n\n\n\n\n\n","category":"method"},{"location":"AnovaBase/#Developer-utility","page":"AnovaBase.jl","title":"Developer utility","text":"","category":"section"},{"location":"AnovaBase/","page":"AnovaBase.jl","title":"AnovaBase.jl","text":"AnovaBase.ftest_nested\nAnovaBase.lrt_nested\nAnovaBase.dof_asgn\nAnovaBase.prednames\nAnovaBase.getterms\nAnovaBase.isinteract\nAnovaBase.select_super_interaction\nAnovaBase.select_sub_interaction\nAnovaBase.select_not_super_interaction\nAnovaBase.select_not_sub_interaction\nAnovaBase.subformula\nAnovaBase.clear_schema\nAnovaBase.extract_contrasts\nAnovaBase._diff\nAnovaBase._diffn\nAnovaBase.AnovaTable\nAnovaBase.testname","category":"page"},{"location":"AnovaBase/#AnovaBase.ftest_nested","page":"AnovaBase.jl","title":"AnovaBase.ftest_nested","text":"ftest_nested(models::NestedModels{M, N}, df, dfr, dev, σ²) where {M <: RegressionModel, N}\n\nCalculate F-statiscics and p-values based on given parameters.\n\nmodels: nested models \ndf: degrees of freedoms of each models\ndfr: degrees of freedom of residuals of each models\ndev: deviances of each models, i.e. unit deviance\nσ²: squared dispersion of each models\n\nF-statiscic is (devᵢ - devᵢ₋₁) / (dfᵢ₋₁ - dfᵢ) / σ² for the ith predictor.\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.lrt_nested","page":"AnovaBase.jl","title":"AnovaBase.lrt_nested","text":"lrt_nested(models::NestedModels{M, N}, df, dev, σ²) where {M <: RegressionModel, N}\n\nCalculate likelihood ratio and p-values based on given parameters.\n\nmodels: nested models \ndf: degrees of freedom of each models\ndev: deviances of each models, i.e. unit deviance\nσ²: squared dispersion of each models\n\nThe likelihood ratio of the ith predictor is LRᵢ = (devᵢ - devᵢ₋₁) / σ².\n\nIf dev is alternatively -2loglikelihood, σ² should be set to 1.\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.dof_asgn","page":"AnovaBase.jl","title":"AnovaBase.dof_asgn","text":"dof_asgn(v::Vector{Int})\n\nCalculate degrees of freedom of each predictors. 'v' can be obtained by StatsModels.asgn(f::FormulaTerm). For a given trm::RegressionModel, it is as same as trm.mm.assign.\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.prednames","page":"AnovaBase.jl","title":"AnovaBase.prednames","text":"prednames(aov::AnovaResult)\nprednames(anovamodel::FullModel) \nprednames(anovamodel::NestedModels)\nprednames(<model>)\n\nReturn the name of predictors as a vector of strings. When there are multiple models, return value is nothing.\n\n\n\n\n\nprednames(<term>)\n\nReturn the name(s) of predictor(s). Return value is either a String, an iterable of Strings or nothing.\n\nExamples\n\njulia> iris = dataset(\"datasets\", \"iris\");\n\njulia> f = formula(lm(@formula(log(SepalLength) ~ SepalWidth + PetalLength * PetalWidth), iris))\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  SepalWidth(continuous)\n  PetalLength(continuous)\n  PetalWidth(continuous)\n  PetalLength(continuous) & PetalWidth(continuous)\n\njulia> prednames(f)\n[\"(Intercept)\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\", \"PetalLength & PetalWidth\"]\n\njulia> prednames(InterceptTerm{false}())\n\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.getterms","page":"AnovaBase.jl","title":"AnovaBase.getterms","text":"getterms(<term>)\n\nReturn the symbol of term(s) as a vector of Expr or Symbol.\n\nExamples\n\njulia> iris = dataset(\"datasets\", \"iris\");\n\njulia> f = formula(lm(@formula(log(SepalLength) ~ Species + PetalLength * PetalWidth), iris))\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n  PetalLength(continuous)\n  PetalWidth(continuous)\n  PetalLength(continuous) & PetalWidth(continuous)\n\njulia> getterms(f)\n(Expr[:(log(SepalLength))], [:Species, :PetalLength, :PetalWidth])\n\njulia> getterms(InterceptTerm{true}())\nSymbol[]\n\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.isinteract","page":"AnovaBase.jl","title":"AnovaBase.isinteract","text":"isinteract(m::MatrixTerm, id1::Int, id2::Int)\nisinteract(f::TupleTerm, id1::Int, id2::Int)\n\nDetermine if f[id2] is an interaction term of f[id1] and other terms.\n\nExamples\n\njulia> iris = dataset(\"datasets\", \"iris\");\n\njulia> f = formula(lm(@formula(log(SepalLength) ~ Species + PetalLength * PetalWidth), iris))\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n  PetalLength(continuous)\n  PetalWidth(continuous)\n  PetalLength(continuous) & PetalWidth(continuous)\n\njulia> isinteract(f.rhs, 1, 2)\ntrue\n\njulia> isinteract(f.rhs, 3, 4)\nfalse\n\njulia> isinteract(f.rhs, 4, 5)\ntrue\n\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.select_super_interaction","page":"AnovaBase.jl","title":"AnovaBase.select_super_interaction","text":"select_super_interaction(m::MatrixTerm, id::Int)\nselect_super_interaction(f::TupleTerm, id::Int)\nselect_sub_interaction(m::MatrixTerm, id::Int)\nselect_sub_interaction(f::TupleTerm, id::Int)\nselect_not_super_interaction(m::MatrixTerm, id::Int)\nselect_not_super_interaction(f::TupleTerm, id::Int)\nselect_not_sub_interaction(m::MatrixTerm, id::Int)\nselect_not_sub_interaction(f::TupleTerm, id::Int)\n\nReturn a set of index of f, which\n\nreturn terms are interaction terms of f[id] and other terms.\nf[id] is an interaction term of return terms and other terms.\nreturn terms not interaction terms of f[id] and other terms.\nf[id] is not interaction term of return terms and other terms.\n\nExamples\n\njulia> iris = dataset(\"datasets\", \"iris\");\n\njulia> f = formula(lm(@formula(log(SepalLength) ~ Species + PetalLength * PetalWidth), iris))\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n  PetalLength(continuous)\n  PetalWidth(continuous)\n  PetalLength(continuous) & PetalWidth(continuous)\n\njulia> select_super_interaction(f.rhs, 3)\nSet{Int64} with 2 elements:\n  5\n  3\n\njulia> select_sub_interaction(f.rhs, 3)\nSet{Int64} with 2 elements:\n  3\n  1\n\njulia> select_not_super_interaction(f.rhs, 3)\nSet{Int64} with 3 elements:\n  4\n  2\n  1\n\njulia> select_not_sub_interaction(f.rhs, 3)\nSet{Int64} with 3 elements:\n  5\n  4\n  2\n\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.select_sub_interaction","page":"AnovaBase.jl","title":"AnovaBase.select_sub_interaction","text":"select_super_interaction(m::MatrixTerm, id::Int)\nselect_super_interaction(f::TupleTerm, id::Int)\nselect_sub_interaction(m::MatrixTerm, id::Int)\nselect_sub_interaction(f::TupleTerm, id::Int)\nselect_not_super_interaction(m::MatrixTerm, id::Int)\nselect_not_super_interaction(f::TupleTerm, id::Int)\nselect_not_sub_interaction(m::MatrixTerm, id::Int)\nselect_not_sub_interaction(f::TupleTerm, id::Int)\n\nReturn a set of index of f, which\n\nreturn terms are interaction terms of f[id] and other terms.\nf[id] is an interaction term of return terms and other terms.\nreturn terms not interaction terms of f[id] and other terms.\nf[id] is not interaction term of return terms and other terms.\n\nExamples\n\njulia> iris = dataset(\"datasets\", \"iris\");\n\njulia> f = formula(lm(@formula(log(SepalLength) ~ Species + PetalLength * PetalWidth), iris))\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n  PetalLength(continuous)\n  PetalWidth(continuous)\n  PetalLength(continuous) & PetalWidth(continuous)\n\njulia> select_super_interaction(f.rhs, 3)\nSet{Int64} with 2 elements:\n  5\n  3\n\njulia> select_sub_interaction(f.rhs, 3)\nSet{Int64} with 2 elements:\n  3\n  1\n\njulia> select_not_super_interaction(f.rhs, 3)\nSet{Int64} with 3 elements:\n  4\n  2\n  1\n\njulia> select_not_sub_interaction(f.rhs, 3)\nSet{Int64} with 3 elements:\n  5\n  4\n  2\n\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.select_not_super_interaction","page":"AnovaBase.jl","title":"AnovaBase.select_not_super_interaction","text":"select_super_interaction(m::MatrixTerm, id::Int)\nselect_super_interaction(f::TupleTerm, id::Int)\nselect_sub_interaction(m::MatrixTerm, id::Int)\nselect_sub_interaction(f::TupleTerm, id::Int)\nselect_not_super_interaction(m::MatrixTerm, id::Int)\nselect_not_super_interaction(f::TupleTerm, id::Int)\nselect_not_sub_interaction(m::MatrixTerm, id::Int)\nselect_not_sub_interaction(f::TupleTerm, id::Int)\n\nReturn a set of index of f, which\n\nreturn terms are interaction terms of f[id] and other terms.\nf[id] is an interaction term of return terms and other terms.\nreturn terms not interaction terms of f[id] and other terms.\nf[id] is not interaction term of return terms and other terms.\n\nExamples\n\njulia> iris = dataset(\"datasets\", \"iris\");\n\njulia> f = formula(lm(@formula(log(SepalLength) ~ Species + PetalLength * PetalWidth), iris))\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n  PetalLength(continuous)\n  PetalWidth(continuous)\n  PetalLength(continuous) & PetalWidth(continuous)\n\njulia> select_super_interaction(f.rhs, 3)\nSet{Int64} with 2 elements:\n  5\n  3\n\njulia> select_sub_interaction(f.rhs, 3)\nSet{Int64} with 2 elements:\n  3\n  1\n\njulia> select_not_super_interaction(f.rhs, 3)\nSet{Int64} with 3 elements:\n  4\n  2\n  1\n\njulia> select_not_sub_interaction(f.rhs, 3)\nSet{Int64} with 3 elements:\n  5\n  4\n  2\n\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.select_not_sub_interaction","page":"AnovaBase.jl","title":"AnovaBase.select_not_sub_interaction","text":"select_super_interaction(m::MatrixTerm, id::Int)\nselect_super_interaction(f::TupleTerm, id::Int)\nselect_sub_interaction(m::MatrixTerm, id::Int)\nselect_sub_interaction(f::TupleTerm, id::Int)\nselect_not_super_interaction(m::MatrixTerm, id::Int)\nselect_not_super_interaction(f::TupleTerm, id::Int)\nselect_not_sub_interaction(m::MatrixTerm, id::Int)\nselect_not_sub_interaction(f::TupleTerm, id::Int)\n\nReturn a set of index of f, which\n\nreturn terms are interaction terms of f[id] and other terms.\nf[id] is an interaction term of return terms and other terms.\nreturn terms not interaction terms of f[id] and other terms.\nf[id] is not interaction term of return terms and other terms.\n\nExamples\n\njulia> iris = dataset(\"datasets\", \"iris\");\n\njulia> f = formula(lm(@formula(log(SepalLength) ~ Species + PetalLength * PetalWidth), iris))\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n  PetalLength(continuous)\n  PetalWidth(continuous)\n  PetalLength(continuous) & PetalWidth(continuous)\n\njulia> select_super_interaction(f.rhs, 3)\nSet{Int64} with 2 elements:\n  5\n  3\n\njulia> select_sub_interaction(f.rhs, 3)\nSet{Int64} with 2 elements:\n  3\n  1\n\njulia> select_not_super_interaction(f.rhs, 3)\nSet{Int64} with 3 elements:\n  4\n  2\n  1\n\njulia> select_not_sub_interaction(f.rhs, 3)\nSet{Int64} with 3 elements:\n  5\n  4\n  2\n\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.subformula","page":"AnovaBase.jl","title":"AnovaBase.subformula","text":"subformula(f::FormulaTerm, id; kwargs...)\nsubformula(lhs::AbstractTerm, rhs::MatrixTerm, id::Int; reschema::Bool = false)\nsubformula(lhs::AbstractTerm, rhs::MatrixTerm, id; reschema::Bool = false)\nsubformula(lhs::AbstractTerm, rhs::NTuple{N, AbstractTerm}, id::Int; rhs_id::Int = 1, reschema::Bool = false)\n\nCreate formula from existing lhs and rhs (or rhs[tuple_id]) truncated to 1:id or excluded collection id.  When id is 0, all terms in rhs (or rhs[tuple_id]) will be removed.\n\nIf reschema is true, all terms' schema will be removed.\n\nExamples\n\njulia> iris = dataset(\"datasets\", \"iris\");\n\njulia> f = formula(lm(@formula(log(SepalLength) ~ Species + PetalLength * PetalWidth), iris))\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n  PetalLength(continuous)\n  PetalWidth(continuous)\n  PetalLength(continuous) & PetalWidth(continuous)\n\njulia> subformula(f, 2)\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n\njulia> subformula(f, [3, 5]; reschema = true)\nFormulaTerm\nResponse:\n  (SepalLength)->log(SepalLength)\nPredictors:\n  1\n  Species(DummyCoding:3→2)\n  PetalWidth(unknown)\n\njulia> f = formula(fit(LinearMixedModel, @formula(SepalLength ~ SepalWidth + (SepalWidth|Species)), iris))\nFormulaTerm\nResponse:\n  SepalLength(continuous)\nPredictors:\n  1\n  SepalWidth(continuous)\n  (1 + SepalWidth | Species)\n\njulia> subformula(f, 0)\nFormulaTerm\nResponse:\n  SepalLength(continuous)\nPredictors:\n  0\n  (1 + SepalWidth | Species)\n\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.clear_schema","page":"AnovaBase.jl","title":"AnovaBase.clear_schema","text":"clear_schema(<terms with schema>) = <terms without schema>\n\nClear any applied schema on terms.\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.extract_contrasts","page":"AnovaBase.jl","title":"AnovaBase.extract_contrasts","text":"extract_contrasts(f::FormulaTerm)\n\nExtract a dictionary of contrasts. The keys are symbols of term; the values are contrasts (AbstractContrasts).\n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase._diff","page":"AnovaBase.jl","title":"AnovaBase._diff","text":"_diff(t::NTuple)\n\nReturn a tuple of difference between adjacent elements of a tuple(later - former). \n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase._diffn","page":"AnovaBase.jl","title":"AnovaBase._diffn","text":"_diff(t::NTuple)\n\nReturn a tuple of difference between adjacent elements of a tuple(former - later). \n\n\n\n\n\n","category":"function"},{"location":"AnovaBase/#AnovaBase.AnovaTable","page":"AnovaBase.jl","title":"AnovaBase.AnovaTable","text":"AnovaTable\n\nA table with coefficients and related statistics of ANOVA. It is mostly modified from StatsModels.CoefTable.\n\nFields\n\ncols: values of each statiscics.\ncolnms: names of statiscics.\nrownms: names of each row.\npvalcol: the index of column repressenting p-value.\nteststatcol: the index of column representing test statiscics.\n\nConstructor\n\nAnovaTable(cols::Vector, colnms::Vector, rownms::Vector, pvalcol::Int = 0, teststatcol::Int = 0)\nAnovaTable(mat::Matrix, colnms::Vector, rownms::Vector, pvalcol::Int = 0, teststatcol::Int = 0)\n\n\n\n\n\n","category":"type"},{"location":"AnovaBase/#AnovaBase.testname","page":"AnovaBase.jl","title":"AnovaBase.testname","text":"testname(::Type{FTest}) = \"F test\"\ntestname(::Type{LRT}) = \"Likelihood-ratio test\"\n\nName of tests.\n\n\n\n\n\n","category":"function"},{"location":"Examples_MixedModels/#AnovaMixedModels","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"","category":"section"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"using AnovaMixedModels, DataFrames, GLM, CSV, CategoricalArrays\nanxiety = CSV.read(\"anxiety.csv\", DataFrame)\ntransform!(anxiety, :id => categorical, renamecols = false)\ntoenail = CSV.read(\"toenail.csv\", DataFrame)\ntransform!(toenail, [1, 2, 3] .=> categorical, renamecols = false)","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"The implementation of ANOVA for mixed-effects models is primarily based on MixedModels. The syntax is similar to anova for GLM.   ","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"using AnovaMixedModels","category":"page"},{"location":"Examples_MixedModels/#Linear-mixed-effects-model","page":"AnovaMixedModels","title":"Linear mixed-effects model","text":"","category":"section"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"We get a dataset from R directly by RCall.","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"R\"\"\"data(\"anxiety\", package = \"datarium\")\"\"\"\nanxiety = stack(rcopy(R\"anxiety\"), [:t1, :t2, :t3], [:id, :group], variable_name = :time, value_name = :score)\nanxiety = combine(anxiety, Not(:time), :time => ByRow(x->parse(Int, replace(String(x), \"t\"=>\"\"))) => :time)","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"We can fit a linear mixed-effects model first. lme is an alias for fit(LinearMixedModel, formula, data, args...).","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"lmm1 = lme(@formula(score ~ group * time + (1|id)), anxiety)\nanova(lmm1)","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"Alternatively, we can use anova_lme. Like anova_lm, this function will fit and store a model; in this case, a LinearMixedModel fit by Restricted maximum likelihood.","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"aov = anova_lme(@formula(score ~ group * time + (1|id)), anxiety, type = 3)","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"aov.model.optsum.REML","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"note: Note\nType 2 sum of squares is not implemented now.  ","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"For likeihood-ratio test, all submodels are fitted. The model should be fitted by maximum likelihood estimation.","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"anova(LRT, lmm1)","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"When comparing multiple mixed models, likelihood-ratio test is used by default.  It's also identical to StatsModels.lrtest and MixedModels.likelihoodratiotest.","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"lmms = nestedmodels(lmm1)\nanova(lmms...) # as same as anova(LRT, lmm1)\nMixedModels.likelihoodratiotest(lmms[2:end]...)","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"Comparing between LinearModel and LinearMixedModel is also available.","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"lm1 = lm(@formula(score ~ group * time), anxiety)\nlmm2 = lme(@formula(score ~ group * time + (group|id)), anxiety)\nanova(lm1, lmm1, lmm2)","category":"page"},{"location":"Examples_MixedModels/#Generalized-linear-mixed-effects-model","page":"AnovaMixedModels","title":"Generalized linear mixed-effects model","text":"","category":"section"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"The following is an example of generalized mixed model. glme is an alias for fit(GeneralizedLinearMixedModel, formula, data, args...).","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"R\"\"\"data(\"toenail\", package = \"HSAUR2\")\"\"\"\ntoenail = rcopy(R\"toenail\")","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"glmm1 = glme(@formula(outcome ~ visit + treatment + (1|patientID)), toenail, Binomial(), LogitLink(), nAGQ = 20, wts = ones(Float64, size(toenail, 1)));\nglmm2 = glme(@formula(outcome ~ visit * treatment + (1|patientID)), toenail, Binomial(), LogitLink(), nAGQ = 20, wts = ones(Float64, size(toenail, 1)));\nglm1 = glm(@formula(outcome ~ visit + treatment), toenail, Binomial(), LogitLink());\nanova(glm1, glmm1, glmm2)","category":"page"},{"location":"Examples_MixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"note: Note\nOnly likelihood-ratio test is available now for GeneralizedLinearMixedModel.","category":"page"},{"location":"Examples_FixedEffectModels/#AnovaFixedEffectModels","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"","category":"section"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"using AnovaFixedEffectModels, DataFrames, CSV, CategoricalArrays\ngpa = CSV.read(\"gpa.csv\", DataFrame)\ntransform!(gpa,\n        7 => x->replace(x, \"yes\" => true, \"no\" => false, \"NA\" => missing),\n        4 => x->categorical(x, levels = [\"1 hour\", \"2 hours\", \"3 hours\"], ordered = true),\n        renamecols = false)\ntransform!(gpa, [1, 2, 5, 7] .=> categorical, renamecols = false)","category":"page"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"using AnovaFixedEffectModels","category":"page"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"AnovaFixedEffectModels.jl supports FixedEffectModels; however, because anova relies on model schema, the output of FixedEffectModels.reg is not compatible. ","category":"page"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"To solve this issue, fitting model using lfe instead of reg.","category":"page"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"fem1 = lfe(@formula(gpa ~ fe(student) + occasion + job), gpa)","category":"page"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"If a model is already fitted by reg, use to_trm to convert it into StatsModels.TableRegressionModel.","category":"page"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"model = reg(gpa, @formula(gpa ~ fe(student) + occasion + job))\nfem1 = to_trm(model, gpa)\naovf = anova(fem1)","category":"page"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"note: Note\nlfe is actually slower because it re-compiles every execution.","category":"page"},{"location":"Examples_FixedEffectModels/","page":"AnovaFixedEffectModels","title":"AnovaFixedEffectModels","text":"note: Note\nOnly F-test is available for FixedEffectModel.","category":"page"},{"location":"AnovaMixedModels/#AnovaMixedModels.jl","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.jl","text":"","category":"section"},{"location":"AnovaMixedModels/","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.jl","text":"CurrentModule = AnovaMixedModels","category":"page"},{"location":"AnovaMixedModels/#ANOVA","page":"AnovaMixedModels.jl","title":"ANOVA","text":"","category":"section"},{"location":"AnovaMixedModels/","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.jl","text":"AnovaMixedModels.anova(::Val{:AnovaMixedModels})\nanova_lme","category":"page"},{"location":"AnovaMixedModels/#AnovaBase.anova-Tuple{Val{:AnovaMixedModels}}","page":"AnovaMixedModels.jl","title":"AnovaBase.anova","text":"anova(<models>...; test::Type{<: GoodnessOfFit}, <keyword arguments>)\nanova(test::Type{<: GoodnessOfFit}, <models>...; <keyword arguments>)\n\nAnalysis of variance.\n\nReturn AnovaResult{M, test, N}.\n\nmodels: model objects\nLinearMixedModel fitted by AnovaMixedModels.lme or fit(LinearMixedModel, ...)\nGeneralizedLinearMixedModel fitted by AnovaMixedModels.glme or fit(GeneralizedLinearMixedModel, ...)\nIf mutiple models are provided, they should be nested and the last one is the most saturated. The first model can also be the corresponding GLM object without random effects.\ntest: test statistics for goodness of fit. Available tests are LikelihoodRatioTest (LRT) and FTest. The default is based on the model type.\nLinearMixedModel: FTest for one model fit; LRT for nested models.\nGeneralizedLinearMixedModel: LRT for nested models.\n\nOther keyword arguments:\n\nWhen one model is provided:  \ntype type of anova (1 or 3). Default value is 1.\nadjust_sigma: whether adjust σ to match that of linear mixed-effect model fitted by REML. The result will be slightly deviated from that of model fitted by REML.\nWhen multiple models are provided:  \ncheck: allows to check if models are nested. Defalut value is true. Some checkers are not implemented now.\nisnested: true when models are checked as nested (manually or automatically). Defalut value is false. \n\nAlgorithm:\n\nF-test: \nNo deviance is computed. F-statistic is computed directly from variance-covariance matrix(vcov).\nType I:\nFirst, calculate f as the upper factor of Cholesky factorization of vcov⁻¹ * β.\nThen, for a factor that starts at ith row/column of vcov with n degree of freedom, the f-statistic is Σᵢⁱ⁺ⁿ⁻¹ fₖ²/n.\nType III: \nFor a factor occupying ith to jth row/column of vcov with n degree of freedom, f-statistic is (β[i:j]' * vcov[i:j, i:j]⁻¹ * β[i:j])/n.\nLRT:\nThe attribute deviance is -2loglikelihood for a linear mixed-effect model; deviance computed by Laplace approximation   or n-point adaptive Gauss-Hermite quadrature for a generalized linear mixed-effect model. \nFor the ith model, the likelihood ratio is defined as devianceᵢ₋₁ - devianceᵢ.\n\nFor fitting new models and conducting anova at the same time, see anova_lme for LinearMixedModel.\n\nnote: Note\nThe result with adjust_sigma will be slightly deviated from that of model fitted directly by REML.\n\nnote: Note\nFor the computation of degrees of freedom, please see calcdof.\n\n\n\n\n\n","category":"method"},{"location":"AnovaMixedModels/#AnovaMixedModels.anova_lme","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.anova_lme","text":"anova_lme(f::FormulaTerm, tbl; test::Type{<: GoodnessOfFit} = FTest, <keyword arguments>)\n\nanova_lme(test::Type{<: GoodnessOfFit}, f::FormulaTerm, tbl; <keyword arguments>)\n\nanova(test::Type{<: GoodnessOfFit}, ::Type{<: LinearMixedModel}, f::FormulaTerm, tbl;\n        type::Int = 1, \n        adjust_sigma::Bool = true, <keyword arguments>)\n\nANOVA for linear mixed-effect models.\n\nThe arguments f and tbl are Formula and DataFrame.\n\ntest: GoodnessOfFit. The default is FTest.\ntype: type of anova (1 or 3). Default value is 1.\nadjust_sigma: whether adjust σ to match that of linear mixed-effect model fitted by REML. The result will be slightly deviated from that of model fitted by REML.\n\nOther keyword arguments\n\nwts = []\ncontrasts = Dict{Symbol,Any}()\nprogress::Bool = true\nREML::Bool = true\n\nanova_lme generate a LinearMixedModel fitted with REML if applying FTest; otherwise, a model fitted with ML.\n\nnote: Note\nThe result with adjust_sigma will be slightly deviated from that of model fitted directly by REML.\n\n\n\n\n\n","category":"function"},{"location":"AnovaMixedModels/#Models","page":"AnovaMixedModels.jl","title":"Models","text":"","category":"section"},{"location":"AnovaMixedModels/","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.jl","text":"AnovaMixedModels.nestedmodels(::Val{:AnovaMixedModels})\nlme\nglme","category":"page"},{"location":"AnovaMixedModels/#AnovaBase.nestedmodels-Tuple{Val{:AnovaMixedModels}}","page":"AnovaMixedModels.jl","title":"AnovaBase.nestedmodels","text":"nestedmodels(model::LinearMixedModel; null::Bool = true, <keyword arguments>)\n\nnestedmodels(::Type{LinearMixedModel}, f::FormulaTerm, tbl; null::Bool = true, wts = [], contrasts = Dict{Symbol, Any}(), verbose::Bool = false, REML::Bool = false)\n\nGenerate nested models from a model or formula and data. The null model will be an empty model if the keyword argument null is true (default).\n\n\n\n\n\n","category":"method"},{"location":"AnovaMixedModels/#AnovaMixedModels.lme","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.lme","text":"lme(f::FormulaTerm, tbl; wts, contrasts, progress, REML)\n\nAn alias for fit(LinearMixedModel, f, tbl; wts, contrasts, progress, REML).\n\n\n\n\n\n","category":"function"},{"location":"AnovaMixedModels/#AnovaMixedModels.glme","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.glme","text":"glme(f::FormulaTerm, tbl, d::Distribution, l::Link; kwargs...)\n\nAn alias for fit(GeneralizedLinearMixedModel, f, tbl, d, l; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"AnovaMixedModels/#Miscellaneous","page":"AnovaMixedModels.jl","title":"Miscellaneous","text":"","category":"section"},{"location":"AnovaMixedModels/","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.jl","text":"calcdof","category":"page"},{"location":"AnovaMixedModels/#AnovaMixedModels.calcdof","page":"AnovaMixedModels.jl","title":"AnovaMixedModels.calcdof","text":"calcdof(model::LinearMixedModel)\n\nCalculate degree of freedom of factors and residuals for linear mixed effect models DOF of residuals are estimated by between-within method: dofᵢ = nobsᵢ - dofᵢ₋₁ - nfixᵢ\n\nReference algorithm: GLMM FAQ for details.\n\n\n\n\n\n","category":"function"},{"location":"Examples_GLM/#AnovaGLM","page":"AnovaGLM","title":"AnovaGLM","text":"","category":"section"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"using AnovaGLM, RDatasets, DataFrames\niris = dataset(\"datasets\", \"iris\")\nquine = dataset(\"MASS\", \"quine\")\nmtcars = dataset(\"datasets\", \"mtcars\")","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"To use anova on GLM objects , we need AnovaGLM.jl.","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"using AnovaGLM","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"This function will export all functions from GLM and related function in this package, including anova, anova_lm, anova_glm.","category":"page"},{"location":"Examples_GLM/#Ordinary-linear-model","page":"AnovaGLM","title":"Ordinary linear model","text":"","category":"section"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"We first import the well-known iris dataset from RDatasets.","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"iris = dataset(\"datasets\", \"iris\")","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"There's two way to perform ANOVA. anova_lm accepts a formula and data like GLM.lm.","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"anova_lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + Species), iris)","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"We can specify the type of sum of squares by keyword argument type. Let's use type II SS.","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"anova_lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + Species), iris, type = 2)","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"A StatsModels.TableRegressionModel object is fitted and stored in the output of anova_lm.  ","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"We can fit a model first and call anova instead. anova store the model as well.","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"warn: Warn\nIt doesn't create a copy, so any in-place change of the original model should be noticed. ","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"lm1 = lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + Species), iris)\nanova(lm1, type = 3)","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"Multiple models can be compared through the same function.  ","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"note: Note\nThe checker for nested models is not implemented now, so it should be ensured that the later model is more complex than the previous one.  ","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"lms = nestedmodels(LinearModel, @formula(SepalLength ~ SepalWidth * Species), iris, dropcollinear = false)\nanova(lms...)","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"This result is a little bit different from GLM.ftest:","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"ftest(getproperty.(lms[2:end], :model)...)","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"In anova, the F value is calculated by dividing MSR (mean of ΔDeviance) with mean of RSS of the most complex model just like anova in R, while in GLM.ftest, the denominator is replaced by RSS of subsequent model.","category":"page"},{"location":"Examples_GLM/#Generalized-linear-models","page":"AnovaGLM","title":"Generalized linear models","text":"","category":"section"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"quine = dataset(\"MASS\", \"quine\")","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"We fit a negative binomial regression on quine dataset from MASS.","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"nbm = glm(@formula(Days ~ Eth + Sex + Age + Lrn), quine, NegativeBinomial(2.0), LogLink())\nanova(nbm)","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"There's also anova_glm similar to anova_lm.  ","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"anova will automatically select test from F-test or likelihood-ratio test depending on the type of distribution. For distribution of Bernoulli(), Binomial(), Poisson() that have fixed dispersion, likelihood-ratio test is preferred. For other distribution, F-test is preferred.  ","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The next one is an axample of logistic regression.","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"mtcars = dataset(\"datasets\", \"mtcars\")","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"We want to predict if the AM is 0 or 1. Let's use logistic regression with and without interaction terms, and compare this two models by likelihood-ratio test. ","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"glm1 = glm(@formula(AM ~ Cyl + HP + WT), mtcars, Binomial(), LogitLink())\nglm2 = glm(@formula(AM ~ Cyl * HP * WT), mtcars, Binomial(), LogitLink())\nanova(glm1, glm2)","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"lrtest(glm1, glm2)","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"This function works identically as StatsModels.lrtest.","category":"page"},{"location":"Examples_GLM/","page":"AnovaGLM","title":"AnovaGLM","text":"note: Note\nWe can also specify test by keyword arguments test or putting test in the first argument.","category":"page"},{"location":"AnovaGLM/#AnovaGLM.jl","page":"AnovaGLM.jl","title":"AnovaGLM.jl","text":"","category":"section"},{"location":"AnovaGLM/","page":"AnovaGLM.jl","title":"AnovaGLM.jl","text":"CurrentModule = AnovaGLM","category":"page"},{"location":"AnovaGLM/#ANOVA","page":"AnovaGLM.jl","title":"ANOVA","text":"","category":"section"},{"location":"AnovaGLM/","page":"AnovaGLM.jl","title":"AnovaGLM.jl","text":"AnovaGLM.anova(::Val{:AnovaGLM})\nanova_lm\nanova_glm","category":"page"},{"location":"AnovaGLM/#AnovaBase.anova-Tuple{Val{:AnovaGLM}}","page":"AnovaGLM.jl","title":"AnovaBase.anova","text":"anova(<models>...; test::Type{<: GoodnessOfFit},  <keyword arguments>)\nanova(test::Type{<: GoodnessOfFit}, <models>...;  <keyword arguments>)\n\nAnalysis of variance.\n\nReturn AnovaResult{M, test, N}. See AnovaResult for details.\n\nmodels: model objects\nTableRegressionModel{<: LinearModel} fitted by GLM.lm\nTableRegressionModel{<: GeneralizedLinearModel} fitted by GLM.glm\nIf mutiple models are provided, they should be nested and the last one is the most saturated.\ntest: test statistics for goodness of fit. Available tests are LikelihoodRatioTest (LRT) and FTest. The default is based on the model type.\nTableRegressionModel{<: LinearModel}: FTest.\nTableRegressionModel{<: GeneralizedLinearModel}: based on distribution function, see canonicalgoodnessoffit.\n\nOther keyword arguments:\n\nWhen one model is provided:  \ntype specifies type of anova (1, 2 or 3). Default value is 1.\nWhen multiple models are provided:  \ncheck: allows to check if models are nested. Defalut value is true. Some checkers are not implemented now.\nisnested: true when models are checked as nested (manually or automatically). Defalut value is false. \n\nAlgorithm:\n\nFor the ith model, devᵢ is defined as the sum of squared deviance residuals (unit deviance).  It is equivalent to the residual sum of squares for ordinary linear regression.\n\nF-test: \nThe attribute deviance is Δdevᵢ = devᵢ₋₁ - devᵢ.\nF-statistic is then defined as Δdevᵢ/(squared dispersion × degree of freedom).\nFor type I and III ANOVA, F-statistic is computed directly by the variAnce-covariance matrix(vcov) of the saturated model; the deviance is calculated backward.\nType I:\nFirst, calculate f as the upper factor of Cholesky factorization of vcov⁻¹ * β.\nThen, for a factor that starts at ith row/column of vcov with n degree of freedom, the f-statistic is Σᵢⁱ⁺ⁿ⁻¹ fₖ²/n.\nType III: \nFor a factor occupying ith to jth row/column of vcov with n degree of freedom, f-statistic is (β[i:j]' * vcov[i:j, i:j]⁻¹ * β[i:j])/n.\nLRT: \nThe attribute deviance is devᵢ.\nThe likelihood ratio is defined as (devᵢ₋₁ - devᵢ)/squared dispersion.\n\nFor fitting new models and conducting anova at the same time, see anova_lm for LinearModel, anova_glm for GeneralizedLinearModel.\n\n\n\n\n\n","category":"method"},{"location":"AnovaGLM/#AnovaGLM.anova_lm","page":"AnovaGLM.jl","title":"AnovaGLM.anova_lm","text":"anova_lm(X, y; test::Type{<: GoodnessOfFit} = FTest, <keyword arguments>) \n\nanova_lm(test::Type{<: GoodnessOfFit}, X, y; <keyword arguments>)\n\nanova(test::Type{<: GoodnessOfFit}, ::Type{LinearModel}, X, y; \n    type::Int = 1, \n    <keyword arguments>)\n\nANOVA for simple linear regression.\n\nThe arguments X and y can be a Matrix and a Vector or a Formula and a DataFrame. \n\ntype specifies type of anova (1, 2 or 3). Default value is 1.\ndropcollinear controls whether or not lm accepts a model matrix which is less-than-full rank. If true (the default), only the first of each set of linearly-dependent columns is used. The coefficient for redundant linearly dependent columns is 0.0 and all associated statistics are set to NaN.\n\nanova_lm generate a TableRegressionModel object, which is fitted by lm.\n\n\n\n\n\n","category":"function"},{"location":"AnovaGLM/#AnovaGLM.anova_glm","page":"AnovaGLM.jl","title":"AnovaGLM.anova_glm","text":"anova_glm(X, y, d::UnivariateDistribution, l::Link = canonicallink(d); \n        test::Type{<: GoodnessOfFit} = canonicalgoodnessoffit(d), <keyword arguments>)\n\nanova_glm(test::Type{<: GoodnessOfFit}, X, y, d::UnivariateDistribution, l::Link = canonicallink(d); <keyword arguments>)\n\nanova(test::Type{<: GoodnessOfFit}, X, y, d::UnivariateDistribution, l::Link = canonicallink(d); <keyword arguments>)\n\nANOVA for genaralized linear models.\n\nThe arguments X and y can be a Matrix and a Vector or a Formula and a DataFrame. \n\nd: a GLM.UnivariateDistribution.\nl: a GLM.Link\n\nFor other keyword arguments, see fit.\n\n\n\n\n\n","category":"function"},{"location":"AnovaGLM/#Models","page":"AnovaGLM.jl","title":"Models","text":"","category":"section"},{"location":"AnovaGLM/","page":"AnovaGLM.jl","title":"AnovaGLM.jl","text":"AnovaGLM.nestedmodels(::Val{:AnovaGLM})\nGLM.glm(::FormulaTerm, ::DataFrame, ::Binomial, ::Link, ::Vararg{Any})","category":"page"},{"location":"AnovaGLM/#AnovaBase.nestedmodels-Tuple{Val{:AnovaGLM}}","page":"AnovaGLM.jl","title":"AnovaBase.nestedmodels","text":"nestedmodels(trm::TableRegressionModel{<: LinearModel}; null::Bool = true, <keyword arguments>)\nnestedmodels(trm::TableRegressionModel{<: GeneralizedLinearModel}; null::Bool = true, <keyword arguments>)\n\nnestedmodels(::Type{LinearModel}, formula, data; null::Bool = true, <keyword arguments>)\nnestedmodels(::Type{GeneralizedLinearModel}, formula, data, distr::UnivariateDistribution, link::Link = canonicallink(d); null::Bool = true, <keyword arguments>)\n\nGenerate nested models from a model or formula and data.\n\nThe null model will be a model with at least one factor (including intercept) if the link function does not allow factors to be 0 (factors in denominators) or the keyword argument null is false (default value is true).\n\nInverseLink for Gamma\nInverseSquareLink for InverseGaussian\nLinearModel fitted with CholeskyPivoted when dropcollinear = true\n\nOtherwise, it will be an empty model.\n\n\n\n\n\n","category":"method"},{"location":"AnovaGLM/#GLM.glm-Tuple{FormulaTerm, DataFrame, Binomial, Link, Vararg{Any}}","page":"AnovaGLM.jl","title":"GLM.glm","text":"GLM.glm(f::FormulaTerm, df::DataFrame, d::Binomial, l::GLM.Link, args...; kwargs...)\n\nAutomatically transform dependent variable into 0/1 for family Binomial.\n\n\n\n\n\n","category":"method"},{"location":"Algorithm_AnovaMixedModels/#AnovaMixedModels","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"","category":"section"},{"location":"Algorithm_AnovaMixedModels/#F-test","page":"AnovaMixedModels","title":"F-test","text":"","category":"section"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"Given a model M, n is the number of factors, m is the number of columns of M's model matrix.","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"A map id_X 1 m mapsto 1 n maps the index of columns into the corresponding factor sequentially, i.e. forall i j in 1 m i lt j implies id_X(i) leq id_X(j) and forall i in 1 m id_X(i) = k implies textcolumn_i text is a component of  ktextth factor.","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"We can define a vector of index set for each factors:","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"mathbfI = (I_1  I_n)","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"where forall i in I_k id_X(i) = k.","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"The degrees of freedom (dof) is:","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"mathbfdf = (n(I_1)  n(I_n))","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"where n(I) is the size of I.","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"F-value is a vector:","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"mathbfF sim mathcalF_mathbfdf mathbfdf_r","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"where mathbfdf_r is estimated by between-within method.","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"F-value is computed directly by the variance-covariance matrix (boldsymbol Sigma) and the coefficients (boldsymbol beta) of the model. ","category":"page"},{"location":"Algorithm_AnovaMixedModels/#Type-I","page":"AnovaMixedModels","title":"Type I","text":"","category":"section"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"Calculate the the upper factor of Cholesky factorization of boldsymbol Sigma^-1 and multiply with boldsymbol beta:","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"beginaligned\n    boldsymbolSigma^-1 = mathbfLU\n    boldsymboleta = mathbfUboldsymbolbeta\n    F_j = fracsum_k in I_jeta_k^2df_j\nendaligned","category":"page"},{"location":"Algorithm_AnovaMixedModels/#Type-III","page":"AnovaMixedModels","title":"Type III","text":"","category":"section"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"F_j = fracboldsymbolbeta_I_j^T boldsymbolSigma_I_j I_j^-1 boldsymbolbeta_I_jdf_j","category":"page"},{"location":"Algorithm_AnovaMixedModels/#LRT","page":"AnovaMixedModels","title":"LRT","text":"","category":"section"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"Given a vector of models:","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"mathbfM = (M_1  M_n)","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"The mathcalD is -2loglikelihood(mathbfM) for linear mixed-effect models or ordinary linear models; unit deviance for generalized linear mixed-effect model or generalized linear models.","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"The likelihood ratio is a vector:","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"beginaligned\n    mathbfL = mathcalD_1 n - 1 - mathcalD_2 n\n    mathbfL sim chi^2_mathbfdf\nendaligned","category":"page"},{"location":"Algorithm_AnovaMixedModels/","page":"AnovaMixedModels","title":"AnovaMixedModels","text":"where df_i = dof(M_i) - dof(M_i+1)","category":"page"},{"location":"Algorithm_AnovaGLM/#AnovaGLM","page":"AnovaGLM","title":"AnovaGLM","text":"","category":"section"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"Let a vector of models mathbfM and the corresponding base models mathbfB:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"beginaligned\n    mathbfM = (M_1  M_n)\n    mathbfB = (B_1  B_n)\nendaligned","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"where M_1 is the simplest model and M_n is the most complex model.","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"When m models, (M_1  M_m), are given, mathbfM = (M_2  M_m), mathbfB = (M_1  M_m-1). ","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"When one model is given, n is the number of factors except for the factors used in the simplest model. The mathbf M and mathbf B depends on the type of ANOVA.","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"Let the number of columns of M_n's model matrix, m and the number of factors of M_n, l. ","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"A map id_X 1 m mapsto 1 l maps the index of columns into the corresponding factor sequentially, i.e. forall i j in 1 m i lt j implies id_X(i) leq id_X(j) and forall i in 1 m id_X(i) = k implies textcolumn_i text is a component of  ktextth factor.","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The included factors of M_j and B_j are:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"beginaligned\n    mathcalM_j = f in 1 l  f text is a factor of  M_j\n    mathcalB_j = f in 1 l  f text is a factor of  B_j\nendaligned","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"We can define a vector of index sets for each model:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"mathbfI = (I_1  I_n)","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"where forall i in I_k id_X(i) in mathcalM_ksetminus mathcalB_k.","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The deviances for models and base models are:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"beginaligned\n    mathcalD = (mathcalD_1  mathcalD_n)\n    mathcalR = (mathcalR_1  mathcalR_n)\nendaligned","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"where mathcalD_i and mathcalR_i are the sum of squared deviance residuals (unit deviance) of M_i and B_i.  It is equivalent to the residual sum of squares for ordinary linear regression.","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The difference of mathcalD and mathcalR is:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"boldsymbolDelta mathcalD = mathcalD - mathcalR","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The degrees of freedom (dof) are:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"mathbfdf = (n(I_1)  n(I_n))","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"where n(I) is the size of I.","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The sigma is the estimated dispersion (or scale) parameter for M_n's distribution.","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"For ordinary linear regression, ","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"sigma^2 =fracrssdf_r","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"where rss is the residual sum of squares of B_n; df_r is the degrees of freedom of the residuals.","category":"page"},{"location":"Algorithm_AnovaGLM/#F-test","page":"AnovaGLM","title":"F-test","text":"","category":"section"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"F-value is a vector:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"mathbfF sim mathcalF_mathbfdf df_r","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"where ","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"F_i = fracDelta mathcalD_isigma^2 times df_i","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"For a single model, F-value is computed directly by the variance-covariance matrix (boldsymbol Sigma) and the coefficients (boldsymbol beta) of the most complex model; the deviance is calculated backward. Each M_j corresponds to a factor f_j, i.e. id_XI_j = f_j.","category":"page"},{"location":"Algorithm_AnovaGLM/#Type-I","page":"AnovaGLM","title":"Type I","text":"","category":"section"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"Factors are sequentially added to the models, i.e. forall i j in 1 n i  j implies (mathcalB_i subset mathcalB_j) cap (mathcalM_i subset mathcalM_j).","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"Calculate the the upper factor of Cholesky factorization of boldsymbol Sigma^-1 and multiply with boldsymbol beta: ","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"beginaligned\n    boldsymbolSigma^-1 = mathbfLU\n    boldsymboleta = mathbfUboldsymbolbeta\n    F_j = fracsum_k in I_jeta_k^2df_j\nendaligned","category":"page"},{"location":"Algorithm_AnovaGLM/#Type-II","page":"AnovaGLM","title":"Type II","text":"","category":"section"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The included facrors are defined as follows:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"beginaligned\n    mathcalB_j = k in 1 l  k text is not an interaction term of f_j text and other terms\n    mathcalM_j = mathcalB_j cup f_j\nendaligned","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"Define two vectors of index sets mathbf J and mathbf K where ","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"beginaligned\n    J_j = i in 1 m  id_X(i) text is an interaction term of f_j text and other terms\n    K_j = J_j cup I_j\nendaligned","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"And F-value is: ","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"F_j = fracboldsymbolbeta_K_j^T boldsymbolSigma_K_j K_j^-1 boldsymbolbeta_K_j - boldsymbolbeta_J_j^T boldsymbolSigma_J_j J_j^-1 boldsymbolbeta_J_jdf_j","category":"page"},{"location":"Algorithm_AnovaGLM/#Type-III","page":"AnovaGLM","title":"Type III","text":"","category":"section"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The models are all M_n, the base models are models without each factors.  ","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"F-value is:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"F_j = fracboldsymbolbeta_I_j^T boldsymbolSigma_I_j I_j^-1 boldsymbolbeta_I_jdf_j","category":"page"},{"location":"Algorithm_AnovaGLM/#LRT","page":"AnovaGLM","title":"LRT","text":"","category":"section"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"The likelihood ratio is a vector:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"beginaligned \n    mathbfL = boldsymbolDelta mathcalDsigma^2\n    mathbfL sim chi^2_mathbfdf\nendaligned","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"When a single model is provided, mathbfL is computed directly by the variance-covariance matrix.","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"Calculate the the upper factor of Cholesky factorization of sigma^2 boldsymbolSigma^-1 and multiply with boldsymbol beta:","category":"page"},{"location":"Algorithm_AnovaGLM/","page":"AnovaGLM","title":"AnovaGLM","text":"beginaligned\n    sigma^2 boldsymbolSigma^-1 = mathbfLU\n    boldsymboleta = mathbfUboldsymbolbeta\n    L_j = sum_k in I_jeta_k^2\nendaligned","category":"page"},{"location":"#AnovaBase.jl-Documentation","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"AnovaBase.jl is a Julia package providing a simple framework for Analysis of Varaincae (ANOVA) on various types of julia statistical models. It is similar to function anova in R.","category":"page"},{"location":"#Functionality-overview","page":"AnovaBase.jl Documentation","title":"Functionality overview","text":"","category":"section"},{"location":"#anova","page":"AnovaBase.jl Documentation","title":"anova","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"anova(<model>; <type>, <test>)\nanova(<test>, <model>; <type>)\nanova(<models>; <test>)\nanova(<test>, <models>)\n\nanova_lm(<formula>, <data>; <type>, <test>)\nanova_lm(<test>, <formula>, <data>; <type>)\nanova_glm(<formula>, <data>, <distr>, <link>; <type>, <test>)\nanova_glm(<test>, <formula>, <data>, <distr>, <link>; <type>)\nanova_lme(<formula>, <data>; <type>, <test>)\nanova_lme(<test>, <formula>, <data>; <type>)\nanova_lfe(<formula>, <data>, <vcov>; <type>, <test>)\nanova_lfe(<test>, <formula>, <data>, <vcov>; <type>)","category":"page"},{"location":"#nestedmodels","page":"AnovaBase.jl Documentation","title":"nestedmodels","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"nestedmodels(<modeltype>, <formula>, <data>)\nnestedmodels(<model>)","category":"page"},{"location":"#Usage","page":"AnovaBase.jl Documentation","title":"Usage","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"This package is not intentded to be used directly. Use the following packages for different models:","category":"page"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"Packages for models Packages for ANOVA Models Fited by\nGLM.jl AnovaGLM.jl TableRegressionModel{<: LinearModel} GLM.lm or fit(LinearModel, ...)\n  TableRegressionModel{<: GeneralizedLinearModel} GLM.glm or fit(GeneralizedLinearModel, ...)\nMixedModels.jl AnovaMixedModels.jl LinearMixedModel AnovaMixedModels.lme or fit(LinearMixedModel, ...)\n  GeneralizedLinearMixedModel AnovaGLM.glme or fit(GeneralizedLinearMixedModel, ...)\nFixedEffectModels.jl AnovaFixedEffectModels.jl TableRegressionModel{<: FixedEffectModel} AnovaFixedEffectModels.lfe","category":"page"},{"location":"#Tests-for-Goodness-of-Fit","page":"AnovaBase.jl Documentation","title":"Tests for Goodness of Fit","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"FTest: F-test\nLikelihoodRatioTest, LRT: likelihood-ratio test","category":"page"},{"location":"#Types-of-Estimable-Functions","page":"AnovaBase.jl Documentation","title":"Types of Estimable Functions","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"Type I, II, III SS  are supported. ","category":"page"},{"location":"#Table-of-Contents","page":"AnovaBase.jl Documentation","title":"Table of Contents","text":"","category":"section"},{"location":"#Examples","page":"AnovaBase.jl Documentation","title":"Examples","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"Pages = [\n    \"Examples_GLM.md\",\n    \"Examples_MixedModels.md\",\n    \"Examples_FixedEffectModels.md\"\n]\nDepth = 2","category":"page"},{"location":"#Algorithm","page":"AnovaBase.jl Documentation","title":"Algorithm","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"Pages = [\n    \"Algorithm_AnovaGLM.md\",\n    \"Algorithm_AnovaMixedModels.md\",\n    \"Algorithm_AnovaFixedEffectModels.md\"\n]\nDepth = 2","category":"page"},{"location":"#API","page":"AnovaBase.jl Documentation","title":"API","text":"","category":"section"},{"location":"","page":"AnovaBase.jl Documentation","title":"AnovaBase.jl Documentation","text":"Pages = [\n    \"AnovaBase.md\",\n    \"AnovaGLM.md\",\n    \"AnovaMixedModels.md\",\n    \"AnovaFixedEffectModels.md\"\n]","category":"page"}]
}
